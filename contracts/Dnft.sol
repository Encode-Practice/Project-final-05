// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";


interface vrf {
    function requestRandomWords() external returns (uint256);
    function randomNumber(uint256 requestId) external view returns(uint256);
    function senderAddress() external view returns(address);
}

contract dNFT is ERC721, ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;
    // Metadata info for each stage of the NFT on IPFS.
    string[] internal IpfsUri = [
        "ipfs://bafyreifguuazwfh6qhtwcwe3arhuvbi5t7jq43q4ystgzwbs226jsinfoi/metadata.json",
        "ipfs://bafyreiey5dwt6fkecufvm25y4x3ppuwjuit7ngawmp7qia3sa2ldjkduc4/metadata.json",
        "ipfs://bafyreibwiucepwpfe4ewxa7r3b5afvpuevtkskihafhonboeutm32min5a/metadata.json"        
    ];

    uint256 internal interval;
    uint256 internal lastTimeStamp;
    uint256 public requestId;
    address public vrfGenerator;

    constructor() ERC721("dnft", "dnft") {
        interval = 100;
        lastTimeStamp = block.timestamp;
        requestId = 0;
        vrfGenerator = 0xec267adccDC192De82E6F78f794aA3A6e800B451;
    }

    function destroy() public payable onlyOwner {
        address payable s = payable(owner());
        selfdestruct(s);
    } 
    
    function requestRandom() public {
        requestId = vrf(vrfGenerator).requestRandomWords();
    }

    function randomNumber() public view returns (uint256){
        return vrf(vrfGenerator).randomNumber(requestId);
    }

    function senderAddress() public view returns (address){
        return vrf(vrfGenerator).senderAddress();
    }

    function setVrfContract(address contractAddress) external onlyOwner {
        require( contractAddress != vrfGenerator , "already existing address");
        vrfGenerator = contractAddress;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded /*, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            changeStageOne(0);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        string memory uri0 = IpfsUri[0];
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri0);
    }

    function changeInterval(uint256 _interval) public {
        interval = _interval;
    }

    function getInterval() public view returns (uint256) {
        return interval;
    }

    function changeStageRandom(uint256 tokenID) public {
        require(requestId>0, "Please request random number first");
        uint256 r = randomNumber() % IpfsUri.length;
        requestId = 0;
        _setTokenURI(tokenID, IpfsUri[r]);  
    }

    // use 0x0715A7794a1dc8e42615F059dD6e406A6594651A for eth
    function changeStagePricefeed(uint256 tokenID, address priceFeedAdd) public returns (int, int, int) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeedAdd);
        (uint80 roundID, int price, , ,) = priceFeed.latestRoundData();
        (, int price1, , uint timeStamp,) = priceFeed.getRoundData(roundID-1);
        require(timeStamp > 0, "Round not complete");
        int r = (price>price1? int(1) : -1);
        int L = int(IpfsUri.length);
        int targetStage = (L + int(getStage(tokenID)) + r) % L; 
        _setTokenURI(tokenID, IpfsUri[uint(targetStage)]);
        return (r, price, price1);
    }

    // increase stage by one
    function changeStageOne(uint256 _tokenId) public {
        uint256 targetStage = (getStage(_tokenId) + 1) % IpfsUri.length;
        string memory newUri = IpfsUri[targetStage];
        _setTokenURI(_tokenId, newUri);
    }

    // find out the current stage
    function getStage(uint256 _tokenId) public view returns (uint256) {
        //string memory _url = tokenURI(_tokenId);
        bytes32 tbyte = keccak256(abi.encodePacked(tokenURI(_tokenId)));
        uint256 L = IpfsUri.length;
        for (uint256 i=0; i<L; i++) {
            if (keccak256(abi.encodePacked(IpfsUri[i])) == tbyte) {
                return i;
            }
        }
        return L + 1;
    }
    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function thisAddress() public view returns (address) {
        return address(this);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}